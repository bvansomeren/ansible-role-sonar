---
- name: Create a database for Sonar.
  mysql_db:
    name: "{{ sonar_mysql_database }}"
    state: present

- name: Create a sonar user.
  mysql_user:
    name: "{{ sonar_mysql_username }}"
    host: "{{ item }}"
    priv: "{{ sonar_mysql_database }}.*:ALL"
    password: "{{ sonar_mysql_password }}"
  with_items: sonar_mysql_allowed_hosts

- name: Download Sonar.
  get_url:
    url: "{{ sonar_download_url }}"
    dest: "{{ workspace }}/{{ sonar_version_directory }}.zip"

- name: Unzip Sonar.
  unarchive:
    src: "{{ workspace }}/{{ sonar_version_directory }}.zip"
    dest: /usr/local/
    copy: no
    creates: /usr/local/sonar/COPYING

- name: Move Sonar into place.
  shell: >
    mv /usr/local/{{ sonar_version_directory }} /usr/local/sonar
    creates=/usr/local/sonar/COPYING

- include: configure.yml

- name: Add sonar symlinks for service management.
  file:
    src: /usr/local/sonar/bin/linux-x86-64/sonar.sh
    dest: "{{ item }}"
    state: link
  with_items:
    - /usr/bin/sonar
    - /etc/init.d/sonar

- name: ensure sonar RUN_AS_USER is set correctly
  lineinfile:
    dest: /usr/local/sonar/bin/linux-x86-64/sonar.sh
    regexp: ^#RUN_AS_USER
    line: "RUN_AS_USER=sonar"

- name: create sonar group as defined by sonar_service_account
  group:
    name: "{{ sonar_service_account }}"
    state: present

- name: create sonar user as defined by sonar_service_account
  user:
    name: "{{ sonar_service_account }}"
    group: "{{ sonar_service_account }}"
    createhome: no
    home: /usr/local/sonar
    
- name: ensure correct ownership of sonar folders
  file:
    path: /usr/local/sonar 
    owner: "{{ sonar_service_account }}"
    group: "{{ sonar_service_account }}"
    recurse: yes

- name: Ensure Sonar is running and set to start on boot.
  service: name=sonar state=started enabled=yes

- name: Make sure Sonar is responding on the configured port.
  wait_for: port=9000 delay=3 timeout=300
